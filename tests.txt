---------------------------------------{ ft_strlcat }--------------------------------------

#include <stdio.h>
#include <bsd/string.h>

int	main(void)
{
	char	s1[] = "0123456789";
	char	s2[] = "abcdefghij";
	size_t	a;
	size_t	i = 0;

	printf("\n\ns1: %s\ns2: %s", s1, s2);
	a = strlcpy(s2 + 3, s1, 0);
	printf("\n\ns1: %s\ns2: %s\na: %zu\n\n", s1, s2, a);
	printf("s2: ");
	while (s2[i])
	{
		printf("[%zu] ", i);
		i++;
	}
	printf(">> %zu position(s)\n\n", i);
	return (0);
}





 ------------------------------------{ ft_strncmp }-----------------------------------------

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char s1[] = "Hello World!";
	char s2[] = "Hello World!";
	char s3[] = "HEllo World!";
	char s4[] = "hello World!";
	char s5[] = "Hello World!++++";
	char s6[] = "Hello Worl";

	printf("\n\n");
	printf("__________________________________________\n\n");
	printf("s1: %s\ns2: %s\n  > n: 12\n  > strncmp: %d\n  > ft_strncmp: %d\n\n", s1, s2, strncmp(s1, s2, 12), ft_strncmp(s1, s2, 12));
	printf("s1: %s\ns2: %s\n  > n: 15\n  > strncmp: %d\n  > ft_strncmp: %d", s1, s2, strncmp(s1, s2, 15), ft_strncmp(s1, s2, 15));
	printf("\n\n");
	printf("__________________________________________\n\n");
	printf("s1: %s\ns3: %s\n  > n: 12\n  > strncmp: %d\n  > ft_strncmp: %d\n\n", s1, s3, strncmp(s1, s3, 12), ft_strncmp(s1, s3, 12));
	printf("s1: %s\ns3: %s\n  > n: 15\n  > strncmp: %d\n  > ft_strncmp: %d", s1, s3, strncmp(s1, s3, 15), ft_strncmp(s1, s3, 15));
	printf("\n\n");
	printf("__________________________________________\n\n");
	printf("s1: %s\ns4: %s\n  > n: 12\n  > strncmp: %d\n  > ft_strncmp: %d\n\n", s1, s4, strncmp(s1, s4, 12), ft_strncmp(s1, s4, 12));
	printf("s1: %s\ns4: %s\n  > n: 15\n  > strncmp: %d\n  > ft_strncmp: %d", s1, s4, strncmp(s1, s4, 15), ft_strncmp(s1, s4, 15));
	printf("\n\n");
	printf("__________________________________________\n\n");
	printf("s1: %s\ns5: %s\n  > n: 12\n  > strncmp: %d\n  > ft_strncmp: %d\n\n", s1, s5, strncmp(s1, s5, 12), ft_strncmp(s1, s5, 12));
	printf("s1: %s\ns5: %s\n  > n: 15\n  > strncmp: %d\n  > ft_strncmp: %d", s1, s5, strncmp(s1, s5, 15), ft_strncmp(s1, s5, 15));
	printf("\n\n");
	printf("__________________________________________\n\n");
	printf("s1: %s\ns6: %s\n  > n: 12\n  > strncmp: %d\n  > ft_strncmp: %d\n\n", s1, s6, strncmp(s1, s6, 12), ft_strncmp(s1, s6, 12));
	printf("s1: %s\ns6: %s\n  > n: 15\n  > strncmp: %d\n  > ft_strncmp: %d", s1, s6, strncmp(s1, s6, 15), ft_strncmp(s1, s6, 15));
	printf("\n\n");
	printf("__________________________________________\n\n");
	return (0);
}





 ------------------------------------{ ft_memchr }-----------------------------------------

#include <stdio.h>
#include <string.h>

int	main(void)
{
	char s1[] = "Say hello to my little friend";
	char c1 = 'y';
	char c2 = 'e';
	char c3 = 'o';
	char c4 = 'f';
	char c5 = 'i';
	char c6 = 'z';
	char *p;

	printf("\n\n	\"%s\"\n", s1);
	printf("__________________________________________________\n\n");
	p = ft_memchr(s1, c1, 29);
	printf("----{ %c > %p > %c [next: '%c%c%c'] }----\n\n", c1, p, *p, *(p + 1), *(p + 2), *(p + 3));
	p = ft_memchr(s1, c2, 29);
	printf("----{ %c > %p > %c [next: '%c%c%c'] }----\n\n", c2, p, *p, *(p + 1), *(p + 2), *(p + 3));
	p = ft_memchr(s1, c3, 29);
	printf("----{ %c > %p > %c [next: '%c%c%c'] }----\n\n", c3, p, *p, *(p + 1), *(p + 2), *(p + 3));
	p = ft_memchr(s1, c4, 29);
	printf("----{ %c > %p > %c [next: '%c%c%c'] }----\n\n", c4, p, *p, *(p + 1), *(p + 2), *(p + 3));
	p = ft_memchr(s1, c5, 29);
	printf("----{ %c > %p > %c [next: '%c%c%c'] }----\n\n", c5, p, *p, *(p + 1), *(p + 2), *(p + 3));
	p = ft_memchr(s1, c6, 29);
	printf("----{ %c > %p }----\n", c6, p); // Can't get value (*p) > seg fault
	printf("__________________________________________________\n\n\n");
	return (0);
}






 ------------------------------------{ ft_memcmp }-----------------------------------------

#include <string.h>
#include <stdio.h>

int main(void)
{
	char s1[] = "abcdefghi";
	char s2[] = "abcdzfghi";
	char s3[] = "abcdef";
	char s4[] = "";

	printf("\n=====================================================\n\n");
	printf("\n  Test output template:\n\n");
	printf("  str [test_len]: str_value >> ft_memcmp >> memcmp\n\n");

	// s1
	printf("\n\n	     s1: \"%s\" (len: %zu)\n"
		"     __________________________________________"
		"\n\n", s1, ft_strlen(s1));
	int res1 = ft_memcmp(s1, s1, 15);
	int res2 = memcmp(s1, s1, 15);
	printf("	s1 [15]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s1, s2, 9);
	res2 = memcmp(s1, s2, 9);
	printf("	s2 [9]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s1, s2, 3);
	res2 = memcmp(s1, s2, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s1, s2, 0);
	res2 = memcmp(s1, s2, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s1, s3, 9);
	res2 = memcmp(s1, s3, 9);
	printf("	s3 [9]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s1, s3, 3);
	res2 = memcmp(s1, s3, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s1, s3, 0);
	res2 = memcmp(s1, s3, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s1, s4, 9);
	res2 = memcmp(s1, s4, 9);
	printf("	s4 [9]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s1, s4, 3);
	res2 = memcmp(s1, s4, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s1, s4, 0);
	res2 = memcmp(s1, s4, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);

	// s2
	printf("\n\n	     s2: \"%s\" (len: %zu)\n"
		"     __________________________________________"
		"\n\n", s2, ft_strlen(s2));
	res1 = ft_memcmp(s2, s2, 15);
	res2 = memcmp(s2, s2, 15);
	printf("	s2 [15]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s2, s1, 9);
	res2 = memcmp(s2, s1, 9);
	printf("	s1 [9]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s2, s1, 3);
	res2 = memcmp(s2, s1, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s2, s1, 0);
	res2 = memcmp(s2, s1, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s2, s3, 9);
	res2 = memcmp(s2, s3, 9);
	printf("	s3 [9]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s2, s3, 3);
	res2 = memcmp(s2, s3, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s2, s3, 0);
	res2 = memcmp(s2, s3, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s2, s4, 9);
	res2 = memcmp(s2, s4, 9);
	printf("	s4 [9]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s2, s4, 3);
	res2 = memcmp(s2, s4, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s2, s4, 0);
	res2 = memcmp(s2, s4, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);

	// s3
	printf("\n\n	     s3: \"%s\" (len: %zu)\n"
		"     __________________________________________"
		"\n\n", s3, ft_strlen(s3));
	res1 = ft_memcmp(s3, s3, 15);
	res2 = memcmp(s3, s3, 15);
	printf("	s3 [15]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s3, s2, 9);
	res2 = memcmp(s3, s2, 9);
	printf("	s2 [9]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s3, s2, 3);
	res2 = memcmp(s3, s2, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s3, s2, 0);
	res2 = memcmp(s3, s2, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s3, s1, 9);
	res2 = memcmp(s3, s1, 9);
	printf("	s1 [9]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s3, s1, 3);
	res2 = memcmp(s3, s1, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s3, s1, 0);
	res2 = memcmp(s3, s1, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s3, s4, 9);
	res2 = memcmp(s3, s4, 9);
	printf("	s4 [9]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s3, s4, 3);
	res2 = memcmp(s3, s4, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s3, s4, 0);
	res2 = memcmp(s3, s4, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);

	// s4
	printf("\n\n	     s4: \"%s\" (len: %zu)\n"
		"     __________________________________________"
		"\n\n", s4, ft_strlen(s4));
	res1 = ft_memcmp(s4, s4, 15);
	res2 = memcmp(s4, s4, 15);
	printf("	s4 [15]: \"%s\"  >>  %d  >>  %d\n\n", s4, res1, res2);
	res1 = ft_memcmp(s4, s2, 9);
	res2 = memcmp(s4, s2, 9);
	printf("	s2 [9]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s4, s2, 3);
	res2 = memcmp(s4, s2, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s4, s2, 0);
	res2 = memcmp(s4, s2, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s2, res1, res2);
	res1 = ft_memcmp(s4, s3, 9);
	res2 = memcmp(s4, s3, 9);
	printf("	s3 [9]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s4, s3, 3);
	res2 = memcmp(s4, s3, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s4, s3, 0);
	res2 = memcmp(s4, s3, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s3, res1, res2);
	res1 = ft_memcmp(s4, s1, 9);
	res2 = memcmp(s4, s1, 9);
	printf("	s1 [9]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s4, s1, 3);
	res2 = memcmp(s4, s1, 3);
	printf("	   [3]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	res1 = ft_memcmp(s4, s1, 0);
	res2 = memcmp(s4, s1, 0);
	printf("	   [0]: \"%s\"  >>  %d  >>  %d\n\n", s1, res1, res2);
	printf("\n=====================================================\n\n");
	return (0);
}

 ------------------------------------{ ft_memcmp }-----------------------------------------

int	main(void)
{
	/*
		Change the values manually.
		Avoids cluttered output window.
		I'm also too lazy atm to hard-code
		or create an array.
	*/
	char lil1[] = "world!sdsd";
	char big[] = "Hello world!";
	size_t n = 0;

	char *ptr = strnstr(big, lil1, n);

	printf("\n\n %s\n\n", big);

	printf("strnstr\n\n");
	if (ptr)
		printf("[ \"%s\" - %zu ] > %p > %c(%c)%c\n\n", lil1, n, ptr, *(ptr - 1), *(ptr), *(ptr + 1));
	else
		printf("[ \"%s\" - %zu ] > %p\n\n", lil1, n, ptr);
	
	char *ptr2 = ft_strnstr(big, lil1, n);
	printf("ft_strnstr\n\n");
	if (ptr2)
		printf("[ \"%s\" - %zu ] > %p > %c(%c)%c\n\n", lil1, n, ptr2, *(ptr2 - 1), *(ptr2), *(ptr2 + 1));
	else
		printf("[ \"%s\" - %zu ] > %p\n\n", lil1, n, ptr2);

	return (0);
}



